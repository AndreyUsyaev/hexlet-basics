name: push

on:
  push:
    branches:
      - master
    tags:
        - 'v*'

env:
  APP_IMAGE_NAME: hexletbasics/services-app
  CADDY_IMAGE_NAME: hexletbasics/services-caddy
  NGINX_IMAGE_NAME: hexletbasics/services-nginx
  COLOR_MAP: '{ success: "#008000", failure: "#800000" }'
  # BUILDKIT_INLINE_CACHE: 1
  # COMPOSE_DOCKER_CLI_BUILD: 1
  # DOCKER_BUILDKIT: 1

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build App
        uses: docker/build-push-action@v2
        with:
          context: services/app
          file: services/app/Dockerfile.production
          cache-from: type=registry,ref=${{ env.APP_IMAGE_NAME }}:cached
          cache-to: type=inline
          push: true
          tags: ${{ env.APP_IMAGE_NAME }}:cached

      - name: Check
        run: |
          # TODO Какая-то херня. Выше делается образ, который используется в этом композе, но он его не использует и качает вроде бы этот же образ из реестра.
          docker-compose --file docker-compose.yml up --abort-on-container-exit

      - name: Push
        uses: docker/build-push-action@v2
        with:
          context: services/app
          file: services/app/Dockerfile.production
          cache-from: type=registry,ref=${{ env.APP_IMAGE_NAME }}:cached
          push: true
          tags: ${{ env.APP_IMAGE_NAME }}:latest

      - name: Build&Push Caddy
        uses: docker/build-push-action@v2
        with:
          context: services/caddy
          file: services/caddy/Dockerfile.production
          push: true
          tags: ${{ env.CADDY_IMAGE_NAME }}:latest

      - name: Build&Push Nginx
        uses: docker/build-push-action@v2
        with:
          context: services/web-nginx
          file: services/web-nginx/Dockerfile.production
          push: true
          tags: ${{ env.NGINX_IMAGE_NAME }}:latest

      - name: Send notification into Slack
        if: ${{ always() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ fromJson(env.COLOR_MAP)[job.status] }}
          SLACK_TITLE: ${{ job.status }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  release:

    runs-on: ubuntu-latest
    if: ${{ contains(github.ref, '/tags/') }}

    needs:
      - build

    steps:

      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Tag To The Env
        run: echo "RELEASE_VERSION=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV

      - name: Tag App
        uses: docker/build-push-action@v2
        with:
          context: services/app
          file: services/app/Dockerfile.production
          cache-from: type=registry,ref=${{ env.APP_IMAGE_NAME }}:latest
          load: true
          tags: ${{ env.APP_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}
      - run: docker push ${{ env.APP_IMAGE_NAME }}:latest

      - name: Tag Nginx
        uses: docker/build-push-action@v2
        with:
          context: services/web-nginx
          file: services/web-nginx/Dockerfile.production
          cache-from: type=registry,ref=${{ env.APP_IMAGE_NAME }}:latest
          load: true
          tags: ${{ env.NGINX_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}
      - run: docker push ${{ env.NGINX_IMAGE_NAME }}:latest

      - name: Tag Caddy
        uses: docker/build-push-action@v2
        with:
          context: services/caddy
          file: services/caddy/Dockerfile.production
          cache-from: type=registry,ref=${{ env.APP_IMAGE_NAME }}:latest
          load: true
          tags: ${{ env.CADDY_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}
      - run: docker push ${{ env.CADDY_IMAGE_NAME }}:latest

      - name: Send notification into Slack
        if: ${{ always() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ fromJson(env.COLOR_MAP)[job.status] }}
          SLACK_TITLE: ${{ job.status }}
