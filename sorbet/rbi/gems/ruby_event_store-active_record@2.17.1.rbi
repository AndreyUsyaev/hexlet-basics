# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby_event_store-active_record` gem.
# Please instead update this file by running `bin/tapioca gem ruby_event_store-active_record`.


# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#3
module RubyEventStore; end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#4
module RubyEventStore::ActiveRecord; end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/batch_enumerator.rb#5
class RubyEventStore::ActiveRecord::BatchEnumerator
  # @return [BatchEnumerator] a new instance of BatchEnumerator
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/batch_enumerator.rb#6
  def initialize(batch_size, total_limit, reader); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/batch_enumerator.rb#12
  def each; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/batch_enumerator.rb#25
  def first; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/batch_enumerator.rb#29
  def to_a; end

  private

  # Returns the value of attribute batch_size.
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/batch_enumerator.rb#35
  def batch_size; end

  # Returns the value of attribute reader.
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/batch_enumerator.rb#35
  def reader; end

  # Returns the value of attribute total_limit.
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/batch_enumerator.rb#35
  def total_limit; end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#8
class RubyEventStore::ActiveRecord::DatabaseAdapter
  # @raise [UnsupportedAdapter]
  # @return [DatabaseAdapter] a new instance of DatabaseAdapter
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#43
  def initialize(data_type = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#61
  def ==(other); end

  # Returns the value of attribute data_type.
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#51
  def data_type; end

  # @return [Boolean]
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#57
  def eql?(other); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#63
  def hash; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#53
  def supported_data_types; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#67
  def template_directory; end

  private

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#94
  def class_name; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#87
  def validate_data_type!(data_type); end

  class << self
    # @raise [NoMethodError]
    #
    # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#70
    def from_string(adapter_name, data_type = T.unsafe(nil)); end
  end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#23
class RubyEventStore::ActiveRecord::DatabaseAdapter::MySQL < ::RubyEventStore::ActiveRecord::DatabaseAdapter
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#26
  def adapter_name; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#30
  def template_directory; end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#24
RubyEventStore::ActiveRecord::DatabaseAdapter::MySQL::SUPPORTED_DATA_TYPES = T.let(T.unsafe(nil), Array)

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#9
RubyEventStore::ActiveRecord::DatabaseAdapter::NONE = T.let(T.unsafe(nil), Object)

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#11
class RubyEventStore::ActiveRecord::DatabaseAdapter::PostgreSQL < ::RubyEventStore::ActiveRecord::DatabaseAdapter
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#14
  def adapter_name; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#18
  def template_directory; end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#12
RubyEventStore::ActiveRecord::DatabaseAdapter::PostgreSQL::SUPPORTED_DATA_TYPES = T.let(T.unsafe(nil), Array)

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#35
class RubyEventStore::ActiveRecord::DatabaseAdapter::SQLite < ::RubyEventStore::ActiveRecord::DatabaseAdapter
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#38
  def adapter_name; end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#36
RubyEventStore::ActiveRecord::DatabaseAdapter::SQLite::SUPPORTED_DATA_TYPES = T.let(T.unsafe(nil), Array)

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#7
class RubyEventStore::ActiveRecord::Event < ::ActiveRecord::Base
  include ::RubyEventStore::ActiveRecord::Event::GeneratedAttributeMethods
  include ::RubyEventStore::ActiveRecord::Event::GeneratedAssociationMethods

  class << self
    private

    # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#7
    def __class_attr__validators; end

    # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#7
    def __class_attr__validators=(new_value); end

    # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#7
    def __class_attr_defined_enums; end

    # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#7
    def __class_attr_defined_enums=(new_value); end
  end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#7
module RubyEventStore::ActiveRecord::Event::GeneratedAssociationMethods; end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#7
module RubyEventStore::ActiveRecord::Event::GeneratedAttributeMethods; end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/event_id_index_migration_generator.rb#5
class RubyEventStore::ActiveRecord::EventIdIndexMigrationGenerator
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/event_id_index_migration_generator.rb#6
  def call(migration_path); end

  private

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/event_id_index_migration_generator.rb#14
  def absolute_path(path); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/event_id_index_migration_generator.rb#42
  def build_path(migration_path); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/event_id_index_migration_generator.rb#18
  def migration_code; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/event_id_index_migration_generator.rb#22
  def migration_template; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/event_id_index_migration_generator.rb#30
  def migration_version; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/event_id_index_migration_generator.rb#34
  def timestamp; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/event_id_index_migration_generator.rb#38
  def write_to_file(path); end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#13
class RubyEventStore::ActiveRecord::EventInStream < ::ActiveRecord::Base
  include ::RubyEventStore::ActiveRecord::EventInStream::GeneratedAttributeMethods
  include ::RubyEventStore::ActiveRecord::EventInStream::GeneratedAssociationMethods

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#16
  def autosave_associated_records_for_event(*args); end

  class << self
    private

    # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#16
    def __class_attr___callbacks; end

    # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#16
    def __class_attr___callbacks=(new_value); end

    # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#16
    def __class_attr__reflections; end

    # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#16
    def __class_attr__reflections=(new_value); end

    # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#13
    def __class_attr__validators; end

    # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#13
    def __class_attr__validators=(new_value); end

    # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#13
    def __class_attr_defined_enums; end

    # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#13
    def __class_attr_defined_enums=(new_value); end
  end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#13
module RubyEventStore::ActiveRecord::EventInStream::GeneratedAssociationMethods
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#16
  def build_event(*args, &block); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#16
  def create_event(*args, &block); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#16
  def create_event!(*args, &block); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#16
  def event; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#16
  def event=(value); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#16
  def event_changed?; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#16
  def event_previously_changed?; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#16
  def reload_event; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#16
  def reset_event; end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event.rb#13
module RubyEventStore::ActiveRecord::EventInStream::GeneratedAttributeMethods; end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#5
class RubyEventStore::ActiveRecord::EventRepository
  # @return [EventRepository] a new instance of EventRepository
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#8
  def initialize(serializer:, model_factory: T.unsafe(nil)); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#66
  def append_to_stream(records, stream, expected_version); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#94
  def count(specification); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#78
  def delete_stream(stream); end

  # @return [Boolean]
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#128
  def event_in_stream?(event_id, stream); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#124
  def global_position(event_id); end

  # @return [Boolean]
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#82
  def has_event?(event_id); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#86
  def last_stream_event(stream); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#72
  def link_to_stream(event_ids, stream, expected_version); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#120
  def position_in_stream(event_id, stream); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#90
  def read(specification); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#38
  def rescue_from_double_json_serialization!; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#116
  def streams_of(event_id); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#98
  def update_messages(records); end

  private

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#136
  def add_to_stream(event_ids, stream, expected_version); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#207
  def append_to_stream_(records, stream, expected_version); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#165
  def compute_position(resolved_version, index); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#169
  def detect_index_violated(message); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#173
  def insert_hash(record, serialized_record); end

  # @return [Boolean]
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#219
  def json_data_type?; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#202
  def link_to_stream_(event_ids, stream, expected_version); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#194
  def optimize_timestamp(valid_at, created_at); end

  # @raise [EventDuplicatedInStream]
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#160
  def raise_error(e); end

  # Returns the value of attribute serializer.
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#134
  def serializer; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#198
  def start_transaction(&block); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#184
  def upsert_hash(record, serialized_record); end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository.rb#6
RubyEventStore::ActiveRecord::EventRepository::POSITION_SHIFT = T.let(T.unsafe(nil), Integer)

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#5
class RubyEventStore::ActiveRecord::EventRepositoryReader
  # @return [EventRepositoryReader] a new instance of EventRepositoryReader
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#6
  def initialize(event_klass, stream_klass, serializer); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#36
  def count(spec); end

  # @return [Boolean]
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#56
  def event_in_stream?(event_id, stream); end

  # @raise [EventNotFound]
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#50
  def global_position(event_id); end

  # @return [Boolean]
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#12
  def has_event?(event_id); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#16
  def last_stream_event(stream); end

  # @raise [EventNotFoundInStream]
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#44
  def position_in_stream(event_id, stream); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#21
  def read(spec); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#40
  def streams_of(event_id); end

  private

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#122
  def as_at(spec); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#117
  def as_of(spec); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#177
  def coalesce(*exprs); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#69
  def monotonic_id_batch_reader(spec, stream); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#197
  def newer_than_condition(specification); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#201
  def newer_than_or_equal_condition(specification); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#64
  def offset_limit_batch_reader(spec, stream); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#189
  def older_than_condition(specification); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#193
  def older_than_or_equal_condition(specification); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#205
  def order(spec); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#83
  def read_scope(spec); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#209
  def record(record); end

  # Returns the value of attribute serializer.
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#62
  def serializer; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#137
  def start_condition(specification); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#157
  def start_condition_in_global_stream(specification); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#127
  def start_offset_condition(specification, record_id, search_in); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#147
  def stop_condition(specification); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#167
  def stop_condition_in_global_stream(specification); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#132
  def stop_offset_condition(specification, record_id, search_in); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/event_repository_reader.rb#181
  def time_comparison_field(specification); end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/foreign_key_on_event_id_migration_generator.rb#5
class RubyEventStore::ActiveRecord::ForeignKeyOnEventIdMigrationGenerator
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/foreign_key_on_event_id_migration_generator.rb#6
  def call(database_adapter, migration_path); end

  private

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/foreign_key_on_event_id_migration_generator.rb#28
  def absolute_path(path); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/foreign_key_on_event_id_migration_generator.rb#54
  def build_path(migration_path, migration_name, time); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/foreign_key_on_event_id_migration_generator.rb#16
  def each_migration(database_adapter, &block); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/foreign_key_on_event_id_migration_generator.rb#32
  def migration_code(database_adapter, migration_name); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/foreign_key_on_event_id_migration_generator.rb#38
  def migration_template(template_root, name); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/foreign_key_on_event_id_migration_generator.rb#58
  def migration_verion_number(time); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/foreign_key_on_event_id_migration_generator.rb#46
  def migration_version; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/foreign_key_on_event_id_migration_generator.rb#42
  def template_root(database_adapter); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/foreign_key_on_event_id_migration_generator.rb#50
  def write_to_file(path, migration_code); end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/index_violation_detector.rb#5
class RubyEventStore::ActiveRecord::IndexViolationDetector
  # @return [IndexViolationDetector] a new instance of IndexViolationDetector
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/index_violation_detector.rb#6
  def initialize(event_store_events, event_store_events_in_streams); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/index_violation_detector.rb#19
  def detect(message); end

  private

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/index_violation_detector.rb#29
  def detect_mysql(message); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/index_violation_detector.rb#25
  def detect_postgres(message); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/index_violation_detector.rb#34
  def detect_sqlite(message); end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#6
class RubyEventStore::ActiveRecord::InvalidDataTypeForAdapter < ::StandardError; end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/migration_generator.rb#7
class RubyEventStore::ActiveRecord::MigrationGenerator
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/migration_generator.rb#8
  def call(database_adapter, migration_path); end

  private

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/migration_generator.rb#17
  def absolute_path(path); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/migration_generator.rb#48
  def build_path(migration_path); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/migration_generator.rb#21
  def migration_code(database_adapter); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/migration_generator.rb#32
  def migration_template(template_root, name); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/migration_generator.rb#36
  def migration_version; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/migration_generator.rb#28
  def template_root(database_adapter); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/migration_generator.rb#40
  def timestamp; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/migration_generator.rb#44
  def write_to_file(migration_code, path); end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/pg_linearized_event_repository.rb#5
class RubyEventStore::ActiveRecord::PgLinearizedEventRepository < ::RubyEventStore::ActiveRecord::EventRepository
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/pg_linearized_event_repository.rb#6
  def start_transaction(&proc); end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_event_id_index_migration_generator.rb#11
class RubyEventStore::ActiveRecord::RailsEventIdIndexMigrationGenerator < ::Rails::Generators::Base
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_event_id_index_migration_generator.rb#19
  def create_migration; end

  private

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_event_id_index_migration_generator.rb#26
  def migration_version; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_event_id_index_migration_generator.rb#30
  def timestamp; end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_event_id_index_migration_generator.rb#12
class RubyEventStore::ActiveRecord::RailsEventIdIndexMigrationGenerator::Error < ::Thor::Error; end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_foreign_key_on_event_id_migration_generator.rb#11
class RubyEventStore::ActiveRecord::RailsForeignKeyOnEventIdMigrationGenerator < ::Rails::Generators::Base
  # @return [RailsForeignKeyOnEventIdMigrationGenerator] a new instance of RailsForeignKeyOnEventIdMigrationGenerator
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_foreign_key_on_event_id_migration_generator.rb#19
  def initialize(*args); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_foreign_key_on_event_id_migration_generator.rb#27
  def create_migration; end

  private

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_foreign_key_on_event_id_migration_generator.rb#43
  def adapter_name; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_foreign_key_on_event_id_migration_generator.rb#51
  def migration_verion_number(time); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_foreign_key_on_event_id_migration_generator.rb#47
  def migration_version; end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_foreign_key_on_event_id_migration_generator.rb#12
class RubyEventStore::ActiveRecord::RailsForeignKeyOnEventIdMigrationGenerator::Error < ::Thor::Error; end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_migration_generator.rb#10
class RubyEventStore::ActiveRecord::RailsMigrationGenerator < ::Rails::Generators::Base
  # @return [RailsMigrationGenerator] a new instance of RailsMigrationGenerator
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_migration_generator.rb#25
  def initialize(*args); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_migration_generator.rb#36
  def create_migration; end

  private

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_migration_generator.rb#47
  def adapter_name; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_migration_generator.rb#43
  def data_type; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_migration_generator.rb#51
  def migration_version; end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_migration_generator.rb#55
  def timestamp; end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/rails_migration_generator.rb#11
class RubyEventStore::ActiveRecord::RailsMigrationGenerator::Error < ::Thor::Error; end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/railtie.rb#5
class RubyEventStore::ActiveRecord::Railtie < ::Rails::Railtie; end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/skip_json_serialization.rb#7
module RubyEventStore::ActiveRecord::SkipJsonSerialization
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::RubyEventStore::ActiveRecord::SkipJsonSerialization::ClassMethods
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/skip_json_serialization.rb#15
module RubyEventStore::ActiveRecord::SkipJsonSerialization::ClassMethods
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/skip_json_serialization.rb#15
  def hook_attribute_type(name, cast_type); end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/generators/database_adapter.rb#5
class RubyEventStore::ActiveRecord::UnsupportedAdapter < ::StandardError; end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/version.rb#5
RubyEventStore::ActiveRecord::VERSION = T.let(T.unsafe(nil), String)

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/with_abstract_base_class.rb#5
class RubyEventStore::ActiveRecord::WithAbstractBaseClass
  # @return [WithAbstractBaseClass] a new instance of WithAbstractBaseClass
  #
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/with_abstract_base_class.rb#6
  def initialize(base_klass); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/with_abstract_base_class.rb#13
  def call(instance_id: T.unsafe(nil)); end

  private

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/with_abstract_base_class.rb#19
  def build_event_klass(instance_id); end

  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/with_abstract_base_class.rb#29
  def build_stream_klass(instance_id); end
end

# source://ruby_event_store-active_record//lib/ruby_event_store/active_record/with_default_models.rb#5
class RubyEventStore::ActiveRecord::WithDefaultModels
  # source://ruby_event_store-active_record//lib/ruby_event_store/active_record/with_default_models.rb#6
  def call; end
end
