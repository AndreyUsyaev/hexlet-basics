# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `device_detector` gem.
# Please instead update this file by running `bin/tapioca gem device_detector`.


# source://device_detector//lib/device_detector/version.rb#3
class DeviceDetector
  # @return [DeviceDetector] a new instance of DeviceDetector
  #
  # source://device_detector//lib/device_detector.rb#23
  def initialize(user_agent, headers = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#195
  def bot?; end

  # source://device_detector//lib/device_detector.rb#199
  def bot_name; end

  # https://github.com/matomo-org/device-detector/blob/a2535ff3b63e4187f1d3440aed24ff43d74fb7f1/Parser/Device/AbstractDeviceParser.php#L2065-L2073
  #
  # source://device_detector//lib/device_detector.rb#30
  def build_user_agent(user_agent); end

  # Returns the value of attribute client_hint.
  #
  # source://device_detector//lib/device_detector.rb#21
  def client_hint; end

  # source://device_detector//lib/device_detector.rb#84
  def device_brand; end

  # source://device_detector//lib/device_detector.rb#78
  def device_name; end

  # source://device_detector//lib/device_detector.rb#94
  def device_type; end

  # source://device_detector//lib/device_detector.rb#41
  def encode_user_agent_if_needed(user_agent); end

  # source://device_detector//lib/device_detector.rb#54
  def full_version; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#191
  def known?; end

  # source://device_detector//lib/device_detector.rb#48
  def name; end

  # source://device_detector//lib/device_detector.rb#58
  def os_family; end

  # source://device_detector//lib/device_detector.rb#70
  def os_full_version; end

  # source://device_detector//lib/device_detector.rb#64
  def os_name; end

  # Returns the value of attribute user_agent.
  #
  # source://device_detector//lib/device_detector.rb#21
  def user_agent; end

  private

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#293
  def android_mobile_fragment?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#289
  def android_tablet_fragment?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#297
  def android_vr_fragment?; end

  # source://device_detector//lib/device_detector.rb#230
  def bot; end

  # source://device_detector//lib/device_detector.rb#339
  def build_regex(src); end

  # source://device_detector//lib/device_detector.rb#234
  def client; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#330
  def desktop?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#301
  def desktop_fragment?; end

  # This is a workaround until we support detecting mobile only browsers
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#326
  def desktop_string?; end

  # source://device_detector//lib/device_detector.rb#238
  def device; end

  # https://github.com/matomo-org/device-detector/blob/67ae11199a5129b42fa8b985d372ea834104fe3a/DeviceDetector.php#L931-L938
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#247
  def fake_ua?; end

  # https://github.com/matomo-org/device-detector/blob/323629cb679c8572a9745cba9c3803fee13f3cf6/Parser/OperatingSystem.php#L398-L403
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#273
  def fire_os_fix?; end

  # source://device_detector//lib/device_detector.rb#277
  def fire_os_version; end

  # Related to issue mentionned in device.rb#1562
  #
  # source://device_detector//lib/device_detector.rb#264
  def fix_for_x_music; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#257
  def linux_fix?; end

  # https://github.com/matomo-org/device-detector/blob/be1c9ef486c247dc4886668da5ed0b1c49d90ba8/Parser/Client/Browser.php#L772
  # Fix mobile browser names e.g. Chrome => Chrome Mobile
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#253
  def mobile_fix?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#313
  def opera_tablet?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#309
  def opera_tv_store?; end

  # source://device_detector//lib/device_detector.rb#242
  def os; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#268
  def pico_os_fix?; end

  # https://github.com/matomo-org/device-detector/blob/323629cb679c8572a9745cba9c3803fee13f3cf6/Parser/OperatingSystem.php#L378-L383
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#283
  def skip_os_version?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#317
  def tizen_samsung_tv?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#305
  def touch_enabled?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#321
  def uses_mobile_browser?; end

  class << self
    # source://device_detector//lib/device_detector.rb#218
    def cache; end

    # source://device_detector//lib/device_detector.rb#214
    def config; end

    # @yield [config]
    #
    # source://device_detector//lib/device_detector.rb#222
    def configure; end
  end
end

# source://device_detector//lib/device_detector/bot.rb#4
class DeviceDetector::Bot < ::DeviceDetector::Parser
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/bot.rb#5
  def bot?; end

  private

  # source://device_detector//lib/device_detector/bot.rb#11
  def filenames; end
end

# source://device_detector//lib/device_detector/browser.rb#4
class DeviceDetector::Browser
  class << self
    # @return [Boolean]
    #
    # source://device_detector//lib/device_detector/browser.rb#684
    def mobile_only_browser?(name); end
  end
end

# https://github.com/matomo-org/device-detector/blob/75d88bbefb0182f9207c9f48dc39b1bc8c7cc43f/Parser/Client/Browser.php#L48-L680
#
# source://device_detector//lib/device_detector/browser.rb#6
DeviceDetector::Browser::AVAILABLE_BROWSERS = T.let(T.unsafe(nil), Hash)

# source://device_detector//lib/device_detector/browser.rb#640
DeviceDetector::Browser::BROWSER_FULL_TO_SHORT = T.let(T.unsafe(nil), Hash)

# source://device_detector//lib/device_detector/browser.rb#680
DeviceDetector::Browser::KNOWN_BROWSER_TO_NAME = T.let(T.unsafe(nil), Hash)

# https://github.com/matomo-org/device-detector/blob/75d88bbefb0182f9207c9f48dc39b1bc8c7cc43f/Parser/Client/Browser.php#L746-L768
#
# source://device_detector//lib/device_detector/browser.rb#643
DeviceDetector::Browser::MOBILE_ONLY_BROWSERS = T.let(T.unsafe(nil), Set)

# https://github.com/matomo-org/device-detector/blob/75d88bbefb0182f9207c9f48dc39b1bc8c7cc43f/Parser/Client/Browser.php#L775-L783
#
# source://device_detector//lib/device_detector/browser.rb#670
DeviceDetector::Browser::NAME_TO_KNOWN_BROWSERS = T.let(T.unsafe(nil), Hash)

# source://device_detector//lib/device_detector/client.rb#4
class DeviceDetector::Client < ::DeviceDetector::Parser
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/client.rb#9
  def browser?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/client.rb#5
  def known?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/client.rb#13
  def mobile_only_browser?; end

  private

  # source://device_detector//lib/device_detector/client.rb#19
  def filenames; end
end

# source://device_detector//lib/device_detector/client_hint.rb#4
class DeviceDetector::ClientHint
  # @return [ClientHint] a new instance of ClientHint
  #
  # source://device_detector//lib/device_detector/client_hint.rb#13
  def initialize(headers); end

  # Returns the value of attribute app_name.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def app_name; end

  # Returns the value of attribute browser_list.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def browser_list; end

  # source://device_detector//lib/device_detector/client_hint.rb#29
  def browser_name; end

  # Returns the value of attribute full_version.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def full_version; end

  # Returns the value of attribute headers.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def headers; end

  # Returns the value of attribute mobile.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def mobile; end

  # Returns the value of attribute model.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def model; end

  # source://device_detector//lib/device_detector/client_hint.rb#59
  def os_family; end

  # source://device_detector//lib/device_detector/client_hint.rb#44
  def os_name; end

  # source://device_detector//lib/device_detector/client_hint.rb#53
  def os_short_name; end

  # source://device_detector//lib/device_detector/client_hint.rb#36
  def os_version; end

  # Returns the value of attribute platform.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def platform; end

  # Returns the value of attribute platform_version.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def platform_version; end

  private

  # https://github.com/matomo-org/device-detector/blob/28211c6f411528abf41304e07b886fdf322a49b7/Parser/OperatingSystem.php#L330
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/client_hint.rb#68
  def android_app?; end

  # source://device_detector//lib/device_detector/client_hint.rb#140
  def app_name_from_headers; end

  # source://device_detector//lib/device_detector/client_hint.rb#90
  def available_browsers; end

  # source://device_detector//lib/device_detector/client_hint.rb#94
  def available_osses; end

  # https://github.com/matomo-org/device-detector/blob/75d88bbefb0182f9207c9f48dc39b1bc8c7cc43f/Parser/Client/Browser.php#L1076-L1079
  #
  # source://device_detector//lib/device_detector/client_hint.rb#84
  def browser_name_from_list; end

  # source://device_detector//lib/device_detector/client_hint.rb#148
  def extract_app_name; end

  # source://device_detector//lib/device_detector/client_hint.rb#175
  def extract_browser_list; end

  # source://device_detector//lib/device_detector/client_hint.rb#199
  def extract_browser_list_from_full_version_list; end

  # source://device_detector//lib/device_detector/client_hint.rb#181
  def extract_browser_list_from_header(header); end

  # source://device_detector//lib/device_detector/client_hint.rb#192
  def extract_browser_name_and_version(component); end

  # source://device_detector//lib/device_detector/client_hint.rb#223
  def extract_from_header(header); end

  # source://device_detector//lib/device_detector/client_hint.rb#229
  def extract_full_version; end

  # source://device_detector//lib/device_detector/client_hint.rb#241
  def extract_mobile; end

  # source://device_detector//lib/device_detector/client_hint.rb#245
  def extract_model; end

  # source://device_detector//lib/device_detector/client_hint.rb#233
  def extract_platform; end

  # source://device_detector//lib/device_detector/client_hint.rb#237
  def extract_platform_version; end

  # https://github.com/matomo-org/device-detector/blob/67ae11199a5129b42fa8b985d372ea834104fe3a/Parser/OperatingSystem.php#L449-L456
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/client_hint.rb#74
  def fire_os_app?; end

  # source://device_detector//lib/device_detector/client_hint.rb#113
  def fire_os_version; end

  # source://device_detector//lib/device_detector/client_hint.rb#155
  def hint_app_names; end

  # source://device_detector//lib/device_detector/client_hint.rb#161
  def hint_filenames; end

  # source://device_detector//lib/device_detector/client_hint.rb#165
  def hint_filepaths; end

  # https://github.com/matomo-org/device-detector/blob/67ae11199a5129b42fa8b985d372ea834104fe3a/Parser/Client/Browser.php#L923-L929
  # If the version reported from the client hints is YYYY or YYYY.MM (e.g., 2022 or 2022.04),
  # then it is the Iridium browser
  # https://iridiumbrowser.de/news/
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/client_hint.rb#122
  def iridium?; end

  # https://github.com/matomo-org/device-detector/blob/67ae11199a5129b42fa8b985d372ea834104fe3a/Parser/OperatingSystem.php#L439-L447
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/client_hint.rb#79
  def lineage_os_app?; end

  # source://device_detector//lib/device_detector/client_hint.rb#108
  def lineage_version; end

  # source://device_detector//lib/device_detector/client_hint.rb#171
  def load_hint_app_names; end

  # https://github.com/matomo-org/device-detector/blob/be1c9ef486c247dc4886668da5ed0b1c49d90ba8/Parser/Client/Browser.php#L865
  #
  # source://device_detector//lib/device_detector/client_hint.rb#211
  def name_from_known_browsers(name); end

  # https://github.com/matomo-org/device-detector/blob/67ae11199a5129b42fa8b985d372ea834104fe3a/Parser/Client/Browser.php#L931-L937
  # https://bbs.360.cn/thread-16096544-1-1.html
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/client_hint.rb#132
  def secure_browser?; end

  # https://github.com/matomo-org/device-detector/blob/28211c6f411528abf41304e07b886fdf322a49b7/Parser/OperatingSystem.php#L434
  #
  # source://device_detector//lib/device_detector/client_hint.rb#99
  def windows_version; end
end

# source://device_detector//lib/device_detector/client_hint.rb#10
class DeviceDetector::ClientHint::HintBrowser < ::Struct; end

# source://device_detector//lib/device_detector/client_hint.rb#7
DeviceDetector::ClientHint::REGEX_CACHE = T.let(T.unsafe(nil), DeviceDetector::MemoryCache)

# source://device_detector//lib/device_detector/client_hint.rb#5
DeviceDetector::ClientHint::ROOT = T.let(T.unsafe(nil), String)

# source://device_detector//lib/device_detector/device.rb#4
class DeviceDetector::Device < ::DeviceDetector::Parser
  # source://device_detector//lib/device_detector/device.rb#1913
  def brand; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/device.rb#1897
  def known?; end

  # source://device_detector//lib/device_detector/device.rb#1901
  def name; end

  # source://device_detector//lib/device_detector/device.rb#1905
  def type; end

  private

  # The order of files needs to be the same as the order of device
  # parser classes used in the piwik project.
  #
  # source://device_detector//lib/device_detector/device.rb#1934
  def filenames; end

  # source://device_detector//lib/device_detector/device.rb#1924
  def fix_for_x_music; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/device.rb#1987
  def hbbtv?; end

  # source://device_detector//lib/device_detector/device.rb#1947
  def matching_regex; end

  # source://device_detector//lib/device_detector/device.rb#2009
  def parse_regexes(path, raw_regexes); end

  # Finds the first match of the string in a list of regexes.
  # Handles exception with special characters caused by bug in Ruby regex
  #
  # @param user_agent [String] User Agent string
  # @param regex_list [Array<Regex>] List of regexes
  # @return [MatchData, nil] MatchData if string matches any regexp, nil otherwise
  #
  # source://device_detector//lib/device_detector/device.rb#1976
  def regex_find(user_agent, regex_list); end

  # source://device_detector//lib/device_detector/device.rb#1997
  def regexes_for_hbbtv; end

  # source://device_detector//lib/device_detector/device.rb#2001
  def regexes_for_shelltv; end

  # source://device_detector//lib/device_detector/device.rb#2005
  def regexes_other; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/device.rb#1992
  def shelltv?; end

  # source://device_detector//lib/device_detector/device.rb#1928
  def vendor_fragment; end
end

# https://github.com/matomo-org/device-detector/blob/75d88bbefb0182f9207c9f48dc39b1bc8c7cc43f/Parser/Device/AbstractDeviceParser.php#L83-L1951
#
# source://device_detector//lib/device_detector/device.rb#25
DeviceDetector::Device::DEVICE_BRANDS = T.let(T.unsafe(nil), Hash)

# order is relevant for testing with fixtures
# https://github.com/matomo-org/device-detector/blob/75d88bbefb0182f9207c9f48dc39b1bc8c7cc43f/Parser/Device/AbstractDeviceParser.php#L59-L74
#
# source://device_detector//lib/device_detector/device.rb#7
DeviceDetector::Device::DEVICE_NAMES = T.let(T.unsafe(nil), Array)

# source://device_detector//lib/device_detector/memory_cache.rb#4
class DeviceDetector::MemoryCache
  # @return [MemoryCache] a new instance of MemoryCache
  #
  # source://device_detector//lib/device_detector/memory_cache.rb#11
  def initialize(config); end

  # Returns the value of attribute data.
  #
  # source://device_detector//lib/device_detector/memory_cache.rb#8
  def data; end

  # source://device_detector//lib/device_detector/memory_cache.rb#27
  def get(key); end

  # source://device_detector//lib/device_detector/memory_cache.rb#32
  def get_or_set(key, value = T.unsafe(nil)); end

  # Returns the value of attribute max_keys.
  #
  # source://device_detector//lib/device_detector/memory_cache.rb#8
  def max_keys; end

  # source://device_detector//lib/device_detector/memory_cache.rb#17
  def set(key, value); end

  private

  # source://device_detector//lib/device_detector/memory_cache.rb#44
  def get_hit(key); end

  # Returns the value of attribute lock.
  #
  # source://device_detector//lib/device_detector/memory_cache.rb#8
  def lock; end

  # source://device_detector//lib/device_detector/memory_cache.rb#51
  def purge_cache; end
end

# source://device_detector//lib/device_detector/memory_cache.rb#5
DeviceDetector::MemoryCache::DEFAULT_MAX_KEYS = T.let(T.unsafe(nil), Integer)

# source://device_detector//lib/device_detector/memory_cache.rb#6
DeviceDetector::MemoryCache::STORES_NIL_VALUE = T.let(T.unsafe(nil), Symbol)

# source://device_detector//lib/device_detector/metadata_extractor.rb#4
class DeviceDetector::MetadataExtractor < ::Struct
  # source://device_detector//lib/device_detector/metadata_extractor.rb#5
  def call; end

  private

  # source://device_detector//lib/device_detector/metadata_extractor.rb#16
  def extract_metadata; end

  # @raise [NotImplementedError]
  #
  # source://device_detector//lib/device_detector/metadata_extractor.rb#11
  def metadata_string; end

  # source://device_detector//lib/device_detector/metadata_extractor.rb#24
  def regex; end
end

# source://device_detector//lib/device_detector/model_extractor.rb#4
class DeviceDetector::ModelExtractor < ::DeviceDetector::MetadataExtractor
  # source://device_detector//lib/device_detector/model_extractor.rb#5
  def call; end

  private

  # source://device_detector//lib/device_detector/model_extractor.rb#16
  def metadata_string; end

  # source://device_detector//lib/device_detector/model_extractor.rb#20
  def regex; end
end

# source://device_detector//lib/device_detector/name_extractor.rb#4
class DeviceDetector::NameExtractor < ::DeviceDetector::MetadataExtractor
  # source://device_detector//lib/device_detector/name_extractor.rb#5
  def call; end

  private

  # source://device_detector//lib/device_detector/name_extractor.rb#15
  def metadata_string; end
end

# source://device_detector//lib/device_detector/os.rb#6
class DeviceDetector::OS < ::DeviceDetector::Parser
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/os.rb#29
  def desktop?; end

  # source://device_detector//lib/device_detector/os.rb#25
  def family; end

  # source://device_detector//lib/device_detector/os.rb#33
  def full_version; end

  # source://device_detector//lib/device_detector/os.rb#17
  def name; end

  # source://device_detector//lib/device_detector/os.rb#21
  def short_name; end

  private

  # source://device_detector//lib/device_detector/os.rb#335
  def filenames; end

  # source://device_detector//lib/device_detector/os.rb#40
  def os_info; end

  class << self
    # source://device_detector//lib/device_detector/os.rb#8
    def mapped_os_version(version, mapping); end
  end
end

# source://device_detector//lib/device_detector/os.rb#245
DeviceDetector::OS::APPLE_OS_NAMES = T.let(T.unsafe(nil), Set)

# https://github.com/matomo-org/device-detector/blob/75d88bbefb0182f9207c9f48dc39b1bc8c7cc43f/Parser/OperatingSystem.php#L286-L288
#
# source://device_detector//lib/device_detector/os.rb#53
DeviceDetector::OS::DESKTOP_OSS = T.let(T.unsafe(nil), Set)

# source://device_detector//lib/device_detector/os.rb#241
DeviceDetector::OS::DOWNCASED_OPERATING_SYSTEMS = T.let(T.unsafe(nil), Hash)

# source://device_detector//lib/device_detector/os.rb#290
DeviceDetector::OS::FAMILY_TO_OS = T.let(T.unsafe(nil), Hash)

# https://github.com/matomo-org/device-detector/blob/75d88bbefb0182f9207c9f48dc39b1bc8c7cc43f/Parser/OperatingSystem.php#L295-L308
#
# source://device_detector//lib/device_detector/os.rb#295
DeviceDetector::OS::FIRE_OS_VERSION_MAPPING = T.let(T.unsafe(nil), Hash)

# https://github.com/matomo-org/device-detector/blob/75d88bbefb0182f9207c9f48dc39b1bc8c7cc43f/Parser/OperatingSystem.php#L315-L337
#
# source://device_detector//lib/device_detector/os.rb#311
DeviceDetector::OS::LINEAGE_OS_VERSION_MAPPING = T.let(T.unsafe(nil), Hash)

# OS short codes mapped to long names
# https://github.com/matomo-org/device-detector/blob/75d88bbefb0182f9207c9f48dc39b1bc8c7cc43f/Parser/OperatingSystem.php#L42-L220
#
# source://device_detector//lib/device_detector/os.rb#61
DeviceDetector::OS::OPERATING_SYSTEMS = T.let(T.unsafe(nil), Hash)

# https://github.com/matomo-org/device-detector/blob/75d88bbefb0182f9207c9f48dc39b1bc8c7cc43f/Parser/OperatingSystem.php#L227-L269
#
# source://device_detector//lib/device_detector/os.rb#248
DeviceDetector::OS::OS_FAMILIES = T.let(T.unsafe(nil), Hash)

# source://device_detector//lib/device_detector/parser.rb#4
class DeviceDetector::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://device_detector//lib/device_detector/parser.rb#10
  def initialize(user_agent); end

  # source://device_detector//lib/device_detector/parser.rb#22
  def full_version; end

  # source://device_detector//lib/device_detector/parser.rb#16
  def name; end

  # Returns the value of attribute user_agent.
  #
  # source://device_detector//lib/device_detector/parser.rb#14
  def user_agent; end

  private

  # source://device_detector//lib/device_detector/parser.rb#110
  def build_regex(src); end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/parser.rb#70
  def device_yml_file?(file_path); end

  # @raise [NotImplementedError]
  #
  # source://device_detector//lib/device_detector/parser.rb#44
  def filenames; end

  # source://device_detector//lib/device_detector/parser.rb#48
  def filepaths; end

  # source://device_detector//lib/device_detector/parser.rb#114
  def from_cache(key, &block); end

  # source://device_detector//lib/device_detector/parser.rb#60
  def load_regexes(file_paths); end

  # source://device_detector//lib/device_detector/parser.rb#34
  def matching_regex; end

  # source://device_detector//lib/device_detector/parser.rb#99
  def parse_regexes(path, raw_regexes); end

  # source://device_detector//lib/device_detector/parser.rb#30
  def regex_meta; end

  # source://device_detector//lib/device_detector/parser.rb#40
  def regexes; end

  # source://device_detector//lib/device_detector/parser.rb#54
  def regexes_for(file_paths); end

  # source://device_detector//lib/device_detector/parser.rb#82
  def rewrite_device_object!(object); end

  # source://device_detector//lib/device_detector/parser.rb#78
  def rewrite_vendor_object!(object); end

  # source://device_detector//lib/device_detector/parser.rb#86
  def symbolize_keys!(object); end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/parser.rb#74
  def vendor_yml_file?(file_path); end
end

# source://device_detector//lib/device_detector/parser.rb#7
DeviceDetector::Parser::REGEX_CACHE = T.let(T.unsafe(nil), DeviceDetector::MemoryCache)

# source://device_detector//lib/device_detector/parser.rb#5
DeviceDetector::Parser::ROOT = T.let(T.unsafe(nil), String)

# source://device_detector//lib/device_detector/version.rb#4
DeviceDetector::VERSION = T.let(T.unsafe(nil), String)

# source://device_detector//lib/device_detector/vendor_fragment.rb#6
class DeviceDetector::VendorFragment < ::DeviceDetector::Parser
  # source://device_detector//lib/device_detector/vendor_fragment.rb#7
  def name; end

  private

  # source://device_detector//lib/device_detector/vendor_fragment.rb#21
  def filenames; end

  # source://device_detector//lib/device_detector/vendor_fragment.rb#13
  def vendor_fragment_info; end
end

# source://device_detector//lib/device_detector/version_extractor.rb#4
class DeviceDetector::VersionExtractor < ::DeviceDetector::MetadataExtractor
  # source://device_detector//lib/device_detector/version_extractor.rb#10
  def call; end

  private

  # source://device_detector//lib/device_detector/version_extractor.rb#35
  def metadata_string; end

  # source://device_detector//lib/device_detector/version_extractor.rb#20
  def os_version_by_regexes; end
end

# source://device_detector//lib/device_detector/version_extractor.rb#5
DeviceDetector::VersionExtractor::MAJOR_VERSION_2 = T.let(T.unsafe(nil), Gem::Version)

# source://device_detector//lib/device_detector/version_extractor.rb#6
DeviceDetector::VersionExtractor::MAJOR_VERSION_3 = T.let(T.unsafe(nil), Gem::Version)

# source://device_detector//lib/device_detector/version_extractor.rb#7
DeviceDetector::VersionExtractor::MAJOR_VERSION_4 = T.let(T.unsafe(nil), Gem::Version)

# source://device_detector//lib/device_detector/version_extractor.rb#8
DeviceDetector::VersionExtractor::MAJOR_VERSION_8 = T.let(T.unsafe(nil), Gem::Version)
