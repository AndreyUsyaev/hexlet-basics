# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `minitest-power_assert` gem.
# Please instead update this file by running `bin/tapioca gem minitest-power_assert`.


# source://minitest-power_assert//lib/minitest/power_assert/version.rb#1
module Minitest
  class << self
    # source://minitest/5.25.5/lib/minitest.rb#323
    def __run(reporter, options); end

    # source://minitest/5.25.5/lib/minitest.rb#97
    def after_run(&block); end

    # source://minitest/5.25.5/lib/minitest.rb#20
    def allow_fork; end

    # source://minitest/5.25.5/lib/minitest.rb#20
    def allow_fork=(_arg0); end

    # source://minitest/5.25.5/lib/minitest.rb#70
    def autorun; end

    # source://minitest/5.25.5/lib/minitest.rb#20
    def backtrace_filter; end

    # source://minitest/5.25.5/lib/minitest.rb#20
    def backtrace_filter=(_arg0); end

    # source://minitest/5.25.5/lib/minitest.rb#19
    def cattr_accessor(name); end

    # source://minitest/5.25.5/lib/minitest.rb#1216
    def clock_time; end

    # source://minitest/5.25.5/lib/minitest.rb#303
    def empty_run!(options); end

    # source://minitest/5.25.5/lib/minitest.rb#20
    def extensions; end

    # source://minitest/5.25.5/lib/minitest.rb#20
    def extensions=(_arg0); end

    # source://minitest/5.25.5/lib/minitest.rb#336
    def filter_backtrace(bt); end

    # source://minitest/5.25.5/lib/minitest.rb#20
    def info_signal; end

    # source://minitest/5.25.5/lib/minitest.rb#20
    def info_signal=(_arg0); end

    # source://minitest/5.25.5/lib/minitest.rb#125
    def init_plugins(options); end

    # source://minitest/5.25.5/lib/minitest.rb#109
    def load_plugins; end

    # source://minitest/5.25.5/lib/minitest.rb#20
    def parallel_executor; end

    # source://minitest/5.25.5/lib/minitest.rb#20
    def parallel_executor=(_arg0); end

    # source://minitest/5.25.5/lib/minitest.rb#143
    def process_args(args = T.unsafe(nil)); end

    # source://minitest/5.25.5/lib/minitest.rb#104
    def register_plugin(name_or_mod); end

    # source://minitest/5.25.5/lib/minitest.rb#20
    def reporter; end

    # source://minitest/5.25.5/lib/minitest.rb#20
    def reporter=(_arg0); end

    # source://minitest/5.25.5/lib/minitest.rb#269
    def run(args = T.unsafe(nil)); end

    # source://minitest/5.25.5/lib/minitest.rb#1207
    def run_one_method(klass, method_name); end

    # source://minitest/5.25.5/lib/minitest.rb#20
    def seed; end

    # source://minitest/5.25.5/lib/minitest.rb#20
    def seed=(_arg0); end
  end
end

# source://minitest-power_assert//lib/minitest/power_assert/version.rb#2
module Minitest::PowerAssert; end

# source://minitest-power_assert//lib/minitest/power_assert.rb#8
module Minitest::PowerAssert::Assertions
  # source://minitest-power_assert//lib/minitest/power_assert.rb#9
  def assert(test = T.unsafe(nil), msg = T.unsafe(nil), &block); end

  # source://minitest-power_assert//lib/minitest/power_assert.rb#19
  def refute(test = T.unsafe(nil), msg = T.unsafe(nil), &block); end
end

# source://minitest-power_assert//lib/minitest/power_assert.rb#30
module Minitest::PowerAssert::Assertions::ContextExtension
  # source://minitest-power_assert//lib/minitest/power_assert.rb#31
  def to_s; end
end

# source://minitest-power_assert//lib/minitest/power_assert/version.rb#3
Minitest::PowerAssert::VERSION = T.let(T.unsafe(nil), String)

# source://minitest-power_assert//lib/minitest/power_assert.rb#40
class Minitest::Test < ::Minitest::Runnable
  include ::Minitest::PowerAssert::Assertions

  # source://minitest/5.25.5/lib/minitest/test.rb#189
  def capture_exceptions; end

  # source://minitest/5.25.5/lib/minitest/test.rb#15
  def class_name; end

  # source://minitest/5.25.5/lib/minitest/test.rb#206
  def neuter_exception(e); end

  # source://minitest/5.25.5/lib/minitest/test.rb#217
  def new_exception(klass, msg, bt, kill = T.unsafe(nil)); end

  # source://minitest/5.25.5/lib/minitest/test.rb#87
  def run; end

  # source://minitest/5.25.5/lib/minitest/test.rb#199
  def sanitize_exception(e); end

  class << self
    # source://minitest/5.25.5/lib/minitest/test.rb#35
    def i_suck_and_my_tests_are_order_dependent!; end

    # source://minitest/5.25.5/lib/minitest/test.rb#26
    def io_lock; end

    # source://minitest/5.25.5/lib/minitest/test.rb#26
    def io_lock=(_arg0); end

    # source://minitest/5.25.5/lib/minitest/test.rb#48
    def make_my_diffs_pretty!; end

    # source://minitest/5.25.5/lib/minitest/test.rb#60
    def parallelize_me!; end

    # source://minitest/5.25.5/lib/minitest/test.rb#70
    def runnable_methods; end
  end
end
