# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `gon` gem.
# Please instead update this file by running `bin/tapioca gem gon`.


# source://gon//lib/gon/base.rb#3
class Gon
  class << self
    # source://gon//lib/gon.rb#83
    def all_variables; end

    # source://gon//lib/gon.rb#87
    def clear; end

    # source://gon//lib/gon.rb#53
    def get_variable(name); end

    # source://gon//lib/gon.rb#30
    def global; end

    # source://gon//lib/gon.rb#102
    def inspect; end

    # source://gon//lib/gon.rb#96
    def jbuilder(*args); end

    # source://gon//lib/gon.rb#61
    def merge_variable(name, value); end

    # source://gon//lib/gon.rb#38
    def method_missing(method, *args, &block); end

    # source://gon//lib/gon.rb#69
    def push(data = T.unsafe(nil), merge = T.unsafe(nil)); end

    # source://gon//lib/gon.rb#91
    def rabl(*args); end

    # source://gon//lib/gon.rb#57
    def set_variable(name, value); end

    # source://gon//lib/gon.rb#34
    def watch; end

    private

    # source://gon//lib/gon.rb#108
    def current_gon; end

    # JbuilderTemplate will not be defined if jbuilder is required
    # before gon. By loading jbuilder again, JbuilderTemplate will
    # now be defined
    #
    # source://gon//lib/gon.rb#129
    def ensure_template_handler_is_defined; end

    # @return [Boolean]
    #
    # source://gon//lib/gon.rb#122
    def public_method_name?(method); end

    # source://gon//lib/gon.rb#112
    def store_builder_data(builder, data, options); end
  end
end

# source://gon//lib/gon/base.rb#4
module Gon::Base
  class << self
    # source://gon//lib/gon/base.rb#24
    def render_data(options = T.unsafe(nil)); end

    private

    # source://gon//lib/gon/base.rb#99
    def convert_hash_keys(value, current_depth, max_depth); end

    # source://gon//lib/gon/base.rb#128
    def convert_key(key, camelize); end

    # source://gon//lib/gon/base.rb#36
    def define_options(options); end

    # source://gon//lib/gon/base.rb#48
    def formatted_data(_o); end

    # source://gon//lib/gon/base.rb#114
    def gon_variables(global_root); end

    # source://gon//lib/gon/base.rb#75
    def render_variable(_o, key, value); end

    # source://gon//lib/gon/base.rb#84
    def render_watch(_o); end

    # source://gon//lib/gon/base.rb#61
    def render_wrap(_o); end

    # source://gon//lib/gon/base.rb#94
    def to_json(value, camel_depth); end
  end
end

# source://gon//lib/gon/base.rb#19
class Gon::Base::Option < ::Struct
  # source://gon//lib/gon/base.rb#19
  def amd; end

  # source://gon//lib/gon/base.rb#19
  def amd=(_); end

  # source://gon//lib/gon/base.rb#19
  def camel_case; end

  # source://gon//lib/gon/base.rb#19
  def camel_case=(_); end

  # source://gon//lib/gon/base.rb#19
  def camel_depth; end

  # source://gon//lib/gon/base.rb#19
  def camel_depth=(_); end

  # Returns the value of attribute cameled
  #
  # @return [Object] the current value of cameled
  #
  # source://gon//lib/gon/base.rb#19
  def cameled; end

  # Sets the attribute cameled
  #
  # @param value [Object] the value to set the attribute cameled to.
  # @return [Object] the newly set value
  #
  # source://gon//lib/gon/base.rb#19
  def cameled=(_); end

  # source://gon//lib/gon/base.rb#19
  def cdata; end

  # source://gon//lib/gon/base.rb#19
  def cdata=(_); end

  # source://gon//lib/gon/base.rb#19
  def global_root; end

  # source://gon//lib/gon/base.rb#19
  def global_root=(_); end

  # source://gon//lib/gon/base.rb#19
  def namespace; end

  # source://gon//lib/gon/base.rb#19
  def namespace=(_); end

  # source://gon//lib/gon/base.rb#19
  def namespace_check; end

  # source://gon//lib/gon/base.rb#19
  def namespace_check=(_); end

  # source://gon//lib/gon/base.rb#19
  def need_tag; end

  # source://gon//lib/gon/base.rb#19
  def need_tag=(_); end

  # source://gon//lib/gon/base.rb#19
  def nonce; end

  # source://gon//lib/gon/base.rb#19
  def nonce=(_); end

  # source://gon//lib/gon/base.rb#19
  def type; end

  # source://gon//lib/gon/base.rb#19
  def type=(_); end

  # source://gon//lib/gon/base.rb#19
  def watch; end

  # source://gon//lib/gon/base.rb#19
  def watch=(_); end

  class << self
    # source://gon//lib/gon/base.rb#19
    def [](*_arg0); end

    # source://gon//lib/gon/base.rb#19
    def inspect; end

    # source://gon//lib/gon/base.rb#19
    def keyword_init?; end

    # source://gon//lib/gon/base.rb#19
    def members; end

    # source://gon//lib/gon/base.rb#19
    def new(*_arg0); end
  end
end

# source://gon//lib/gon/base.rb#5
Gon::Base::VALID_OPTION_DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://gon//lib/gon/helpers.rb#31
module Gon::ControllerHelpers
  # source://gon//lib/gon/helpers.rb#32
  def gon; end

  private

  # source://gon//lib/gon/helpers.rb#47
  def current_gon; end

  # override this since ActionDispatch::Request#uuid appears only in Rails 3.2.1
  #
  # source://gon//lib/gon/helpers.rb#51
  def gon_request_uuid; end

  # @return [Boolean]
  #
  # source://gon//lib/gon/helpers.rb#43
  def wrong_gon_request?; end
end

# source://gon//lib/gon/env_finder.rb#4
module Gon::EnvFinder
  class << self
    # source://gon//lib/gon/env_finder.rb#10
    def controller_env(options = T.unsafe(nil)); end

    # source://gon//lib/gon/env_finder.rb#21
    def template_path(options, extension); end

    private

    # source://gon//lib/gon/env_finder.rb#41
    def current_gon; end

    # @return [Boolean]
    #
    # source://gon//lib/gon/env_finder.rb#37
    def right_extension?(extension, template_path); end
  end
end

# source://gon//lib/gon/env_finder.rb#5
Gon::EnvFinder::ENV_CONTROLLER_KEY = T.let(T.unsafe(nil), String)

# source://gon//lib/gon/env_finder.rb#6
Gon::EnvFinder::ENV_RESPONSE_KEY = T.let(T.unsafe(nil), String)

# source://gon//lib/gon/escaper.rb#4
module Gon::Escaper
  extend ::ActionView::Helpers::JavaScriptHelper
  extend ::ActionView::Helpers::CaptureHelper
  extend ::ActionView::Helpers::OutputSafetyHelper
  extend ::ActionView::Helpers::TagHelper

  class << self
    # source://gon//lib/gon/escaper.rb#10
    def escape_unicode(javascript); end

    # source://gon//lib/gon/escaper.rb#25
    def javascript_cdata_section(content, cdata); end

    # source://gon//lib/gon/escaper.rb#17
    def javascript_tag(content, type, cdata, nonce); end

    private

    # source://gon//lib/gon/escaper.rb#35
    def escape_line_separator(javascript); end
  end
end

# source://gon//lib/gon/global.rb#4
class Gon::Global < ::Gon
  class << self
    # source://gon//lib/gon/global.rb#7
    def all_variables; end

    # source://gon//lib/gon/global.rb#11
    def clear; end

    # source://gon//lib/gon/global.rb#15
    def inspect; end

    # source://gon//lib/gon/global.rb#24
    def jbuilder(*args); end

    # source://gon//lib/gon/global.rb#19
    def rabl(*args); end

    private

    # source://gon//lib/gon/global.rb#32
    def get_variable(name); end

    # source://gon//lib/gon/global.rb#37
    def set_variable(name, value); end
  end
end

# source://gon//lib/gon/jbuilder.rb#4
module Gon::Jbuilder
  class << self
    # source://gon//lib/gon/jbuilder.rb#7
    def handler(args, global = T.unsafe(nil)); end

    private

    # @return [Boolean]
    #
    # source://gon//lib/gon/jbuilder.rb#52
    def new_api?(args); end

    # @return [Boolean]
    #
    # source://gon//lib/gon/jbuilder.rb#48
    def old_api?(args); end

    # source://gon//lib/gon/jbuilder.rb#33
    def parse_options_from(args); end

    # @return [Boolean]
    #
    # source://gon//lib/gon/jbuilder.rb#27
    def valid_options?(options, global); end
  end
end

# source://gon//lib/gon/jbuilder/parser.rb#5
class Gon::Jbuilder::Parser
  include ::ActiveSupport::Benchmarkable
  include ::ActionView::Helpers::ActiveModelHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::AtomFeedHelper
  include ::ActionView::Helpers::CacheHelper
  include ::ActionView::Helpers::ContentExfiltrationPreventionHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::ControllerHelper
  include ::ActionView::Helpers::CspHelper
  include ::ActionView::Helpers::CsrfHelper
  include ::ActionView::Helpers::DateHelper
  include ::ActionView::Helpers::DebugHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::ModelNaming
  include ::ActionView::RecordIdentifier
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper
  include ::ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::NumberHelper
  include ::ActionView::Helpers::RenderingHelper
  include ::ActionView::Helpers
  extend ::ActionView::Helpers::UrlHelper::ClassMethods
  extend ::ActionView::Helpers::SanitizeHelper::ClassMethods

  # @return [Parser] a new instance of Parser
  #
  # source://gon//lib/gon/jbuilder/parser.rb#10
  def initialize(parse_params); end

  # Returns the value of attribute _controller_name.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#8
  def _controller_name; end

  # Sets the attribute _controller_name
  #
  # @param value the value to set the attribute _controller_name to.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#8
  def _controller_name=(_arg0); end

  # source://gon//lib/gon/jbuilder/parser.rb#30
  def assign_controller_variables(controller); end

  # source://gon//lib/gon/jbuilder/parser.rb#105
  def construct_path(args); end

  # Returns the value of attribute controller.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#8
  def controller; end

  # Sets the attribute controller
  #
  # @param value the value to set the attribute controller to.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#8
  def controller=(_arg0); end

  # source://gon//lib/gon/jbuilder/parser.rb#6
  def debug_missing_translation; end

  # source://gon//lib/gon/jbuilder/parser.rb#6
  def debug_missing_translation=(val); end

  # source://gon//lib/gon/jbuilder/parser.rb#38
  def eval_controller_helpers(controller); end

  # source://gon//lib/gon/jbuilder/parser.rb#48
  def eval_controller_url_helpers(controller); end

  # source://gon//lib/gon/jbuilder/parser.rb#118
  def find_partials(lines = T.unsafe(nil)); end

  # Returns the value of attribute locals.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#8
  def locals; end

  # Sets the attribute locals
  #
  # @param value the value to set the attribute locals to.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#8
  def locals=(_arg0); end

  # source://gon//lib/gon/jbuilder/parser.rb#17
  def parse!; end

  # source://gon//lib/gon/jbuilder/parser.rb#77
  def parse_partial(partial_line); end

  # source://gon//lib/gon/jbuilder/parser.rb#95
  def parse_path(path); end

  # source://gon//lib/gon/jbuilder/parser.rb#70
  def parse_source(source, controller); end

  # source://gon//lib/gon/jbuilder/parser.rb#112
  def path_with_ext(path); end

  # source://gon//lib/gon/jbuilder/parser.rb#87
  def set_options_from_hash(options_hash); end

  # Returns the value of attribute template_location.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#8
  def template_location; end

  # Sets the attribute template_location
  #
  # @param value the value to set the attribute template_location to.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#8
  def template_location=(_arg0); end

  # source://gon//lib/gon/jbuilder/parser.rb#60
  def wrap_locals_in_methods(locals); end

  class << self
    # source://gon//lib/gon/jbuilder/parser.rb#6
    def debug_missing_translation; end

    # source://gon//lib/gon/jbuilder/parser.rb#6
    def debug_missing_translation=(val); end
  end
end

# source://gon//lib/gon/json_dumper.rb#4
module Gon::JsonDumper
  class << self
    # source://gon//lib/gon/json_dumper.rb#15
    def dump(object); end

    # source://gon//lib/gon/json_dumper.rb#21
    def escape(json); end
  end
end

# source://gon//lib/gon/json_dumper.rb#7
Gon::JsonDumper::JSON_ESCAPE = T.let(T.unsafe(nil), Hash)

# Taken from ERB::Util
#
# source://gon//lib/gon/json_dumper.rb#6
Gon::JsonDumper::JSON_ESCAPE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://gon//lib/gon/rabl.rb#15
module Gon::Rabl
  class << self
    # source://gon//lib/gon/rabl.rb#18
    def handler(args, global = T.unsafe(nil)); end

    private

    # source://gon//lib/gon/rabl.rb#82
    def include_helpers; end

    # @return [Boolean]
    #
    # source://gon//lib/gon/rabl.rb#92
    def new_api?(args); end

    # @return [Boolean]
    #
    # source://gon//lib/gon/rabl.rb#88
    def old_api?(args); end

    # source://gon//lib/gon/rabl.rb#65
    def parse_options_from(args, global); end

    # source://gon//lib/gon/rabl.rb#34
    def parse_rabl(rabl_path, controller, locals); end

    # source://gon//lib/gon/rabl.rb#44
    def parse_with_rabl(rabl_path, controller, locals); end

    # source://gon//lib/gon/rabl.rb#53
    def parse_with_rabl_rails(rabl_path, controller, locals); end
  end
end

# source://gon//lib/gon/request.rb#4
class Gon::Request
  # @return [Request] a new instance of Request
  #
  # source://gon//lib/gon/request.rb#8
  def initialize(environment); end

  # source://gon//lib/gon/request.rb#13
  def clear; end

  # Returns the value of attribute env.
  #
  # source://gon//lib/gon/request.rb#5
  def env; end

  # Returns the value of attribute gon.
  #
  # source://gon//lib/gon/request.rb#5
  def gon; end

  # Returns the value of attribute id.
  #
  # source://gon//lib/gon/request.rb#6
  def id; end

  # Sets the attribute id
  #
  # @param value the value to set the attribute id to.
  #
  # source://gon//lib/gon/request.rb#6
  def id=(_arg0); end
end

# source://gon//lib/gon/spec_helpers.rb#4
module Gon::SpecHelper; end

# source://gon//lib/gon/spec_helpers.rb#5
module Gon::SpecHelper::Rails
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Gon::SpecHelper::Rails::ClassMethods
end

# source://gon//lib/gon/spec_helpers.rb#8
module Gon::SpecHelper::Rails::ClassMethods
  # source://gon//lib/gon/spec_helpers.rb#21
  def new(*_arg0); end
end

# source://gon//lib/gon/spec_helpers.rb#9
module Gon::SpecHelper::Rails::ClassMethods::GonSession
  # source://gon//lib/gon/spec_helpers.rb#10
  def process(*_arg0, **_arg1); end
end

# source://gon//lib/gon/helpers.rb#4
module Gon::ViewHelpers
  # source://gon//lib/gon/helpers.rb#5
  def include_gon(options = T.unsafe(nil)); end

  # source://gon//lib/gon/helpers.rb#16
  def include_gon_amd(options = T.unsafe(nil)); end

  private

  # source://gon//lib/gon/helpers.rb#26
  def current_gon; end

  # @return [Boolean]
  #
  # source://gon//lib/gon/helpers.rb#22
  def variables_for_request_present?; end
end

# source://gon//lib/gon/watch.rb#4
class Gon::Watch < ::Gon
  class << self
    # source://gon//lib/gon/watch.rb#17
    def all_variables; end

    # source://gon//lib/gon/watch.rb#21
    def clear; end

    # source://gon//lib/gon/watch.rb#9
    def render; end

    # source://gon//lib/gon/watch.rb#13
    def render_amd; end

    private

    # source://gon//lib/gon/watch.rb#53
    def return_variable(value); end

    # @return [Boolean]
    #
    # source://gon//lib/gon/watch.rb#43
    def return_variable?(variable); end

    # source://gon//lib/gon/watch.rb#27
    def set_variable(name, value); end
  end
end
